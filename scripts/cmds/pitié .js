// Importation des modules n√©cessaires
const axios = require("axios"); // Pour effectuer des requ√™tes HTTP
const fs = require("fs");       // Pour manipuler les fichiers
const path = require("path");   // Pour g√©rer les chemins de fichiers

// Exportation d'un objet contenant la configuration et la fonction principale
module.exports = {
  // Configuration de la commande
  config: {
    name: "piti√©",                     // Nom de la commande
    version: "1.0",                   // Version de la commande
    author: "Christus x Aesther",      // Auteur de la commande
    countDown: 10,                   // Temps de latence avant de pouvoir r√©utiliser la commande (en secondes)
    role: 0,                         // Niveau de permission requis (0 = public)
    shortDescription: {
      en: "Ajoute un effet de patte de chat √† la photo de profil" // Description courte (en anglais)
    },
    description: {
      en: "Ajoute un mignon effet de patte de chat √† la photo de profil de l'utilisateur mentionn√© ou de vous-m√™me" // Description d√©taill√©e (en anglais)
    },
    category: "image",                // Cat√©gorie de la commande
    guide: {
      en: "{p}piti√© [@mention ou r√©pondre]\nSi aucune mention ou r√©ponse, utilise votre photo de profil." // Guide d'utilisation (en anglais)
    }
  },

  // Fonction principale ex√©cut√©e lorsque la commande est appel√©e
  onStart: async function ({ api, event, message }) {
    // R√©cup√©ration des informations de l'√©v√©nement (utilisateur, mentions, type de message, r√©ponse)
    const { senderID, mentions, type, messageReply } = event;

    // D√©termination de l'ID de l'utilisateur dont la photo de profil doit √™tre trait√©e
    let uid;
    if (Object.keys(mentions).length > 0) {
      // Si une mention est pr√©sente, utiliser l'ID de la personne mentionn√©e
      uid = Object.keys(mentions)[0];
    } else if (type === "message_reply") {
      // Si une r√©ponse √† un message est pr√©sente, utiliser l'ID de l'exp√©diteur du message r√©pondu
      uid = messageReply.senderID;
    } else {
      // Sinon, utiliser l'ID de l'utilisateur qui a ex√©cut√© la commande
      uid = senderID;
    }

    // Construction de l'URL pour r√©cup√©rer la photo de profil de l'utilisateur
    const avatarURL = `https://graph.facebook.com/${uid}/picture?width=512&height=512&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32`;

    // Tentative d'effectuer les op√©rations
    try {
      // Envoi d'une requ√™te HTTP √† l'API pour g√©n√©rer l'image avec l'effet de patte de chat
      const res = await axios.get(`https://api.popcat.xyz/v2/pet?image=${encodeURIComponent(avatarURL)}`, {
        responseType: "arraybuffer" // Sp√©cifie le type de r√©ponse attendue (donn√©es binaires)
      });

      // D√©finition du chemin du fichier temporaire pour stocker l'image g√©n√©r√©e
      const filePath = path.join(__dirname, "cache", `pet_${uid}_${Date.now()}.png`);
      // √âcriture des donn√©es de l'image dans le fichier
      fs.writeFileSync(filePath, res.data);

      // Envoi de la r√©ponse avec l'image g√©n√©r√©e et suppression du fichier temporaire apr√®s l'envoi
      message.reply({
        body: "üêæ Voici votre image avec l'effet de patte de chat !",
        attachment: fs.createReadStream(filePath) // Cr√©ation d'un flux de lecture du fichier
      }, () => fs.unlinkSync(filePath)); // Supprimer le fichier apr√®s l'envoi
    } catch (err) {
      // En cas d'erreur, afficher l'erreur dans la console
      console.error(err);
      // Envoyer un message d'erreur √† l'utilisateur
      message.reply("‚ùå | √âchec de la g√©n√©ration de l'image avec l'effet de patte.");
    }
  }
};