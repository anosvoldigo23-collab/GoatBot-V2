const axios = require("axios");

module.exports = {
 config: {
 name: "gitstalk", // Nom de la commande
 version: "1.0", // Version de la commande
 author: "Christus x Aesther", // Auteur de la commande
 countDown: 5, // D√©lai d'attente avant de pouvoir r√©utiliser la commande (en secondes)
 role: 0, // Niveau de r√¥le requis pour utiliser la commande (0 = tout le monde)
 shortDescription: { en: "Espionner un profil GitHub" }, // Description courte de la commande (en anglais)
 longDescription: { en: "R√©cup√®re les d√©tails d'un utilisateur GitHub (publics) en utilisant l'API d'Aryan." }, // Description longue de la commande (en anglais)
 category: "social", // Cat√©gorie de la commande
 guide: { en: "{pn} <nom-d'utilisateur-github>\n\nExample:\n{pn} ntkhang03" } // Guide d'utilisation de la commande (en anglais)
 },

 onStart: async function ({ api, args, event }) { // Fonction ex√©cut√©e lorsque la commande est appel√©e
  if (!args[0]) { // V√©rifie si un nom d'utilisateur GitHub a √©t√© fourni
  return api.sendMessage("‚ùå Veuillez fournir un nom d'utilisateur GitHub.", event.threadID, event.messageID); // Renvoie un message d'erreur si aucun nom d'utilisateur n'est fourni
  }

  const username = args[0]; // R√©cup√®re le nom d'utilisateur fourni en argument
  api.setMessageReaction("‚è≥", event.messageID, () => {}, true); // Ajoute une r√©action "‚è≥" (en attente) au message de l'utilisateur

  try {
  const url = `https://aryanapi.up.railway.app/api/gitinfo?username=${encodeURIComponent(username)}`; // Construit l'URL de l'API avec le nom d'utilisateur
  const { data } = await axios.get(url); // Effectue une requ√™te GET √† l'API pour r√©cup√©rer les donn√©es du profil

  if (!data.status || !data.data) { // V√©rifie si la requ√™te a r√©ussi et si des donn√©es ont √©t√© retourn√©es
  return api.sendMessage("‚ùå Impossible de r√©cup√©rer les informations du profil GitHub.", event.threadID, event.messageID); // Renvoie un message d'erreur si la requ√™te a √©chou√©
  }

  const u = data.data; // R√©cup√®re les donn√©es du profil
  const caption = // Construit la l√©gende du message √† envoyer
  `üêô Espionnage de profil GitHub

  üë§ Nom: ${u.name || "N/A"}
  üîó Nom d'utilisateur: ${u.login}
  üìù Bio: ${u.bio || "Pas de bio"}

  üìÇ Repos publics: ${u.public_repos}
  üìë Gists publics: ${u.public_gists}
  üë• Abonn√©s: ${u.followers}
  ‚û°Ô∏è Suivi: ${u.following}

  üìÖ Rejoint le: ${new Date(u.created_at).toLocaleDateString()}
  ‚ôªÔ∏è Derni√®re mise √† jour: ${new Date(u.updated_at).toLocaleDateString()}

  üåç Blog: ${u.blog || "N/A"}
  üê¶ Twitter: ${u.twitter_username || "N/A"}
  üè¢ Entreprise: ${u.company || "N/A"}
  üìç Lieu: ${u.location || "N/A"}

  üîó Profil: ${u.html_url}

  üëÄ Demand√© par: @${event.senderID}`;

  api.sendMessage({ // Envoie le message avec la l√©gende et l'avatar du profil
  body: caption,
  attachment: await getStreamFromURL(u.avatar_url)
  }, event.threadID, event.messageID);

  api.setMessageReaction("‚úÖ", event.messageID, () => {}, true); // Ajoute une r√©action "‚úÖ" (succ√®s) au message de l'utilisateur

  } catch (err) { // G√®re les erreurs potentielles
  console.error("‚ùå Erreur Gitstalk:", err.message); // Affiche l'erreur dans la console
  api.sendMessage("‚ùå √âchec de la r√©cup√©ration des informations du profil GitHub.", event.threadID, event.messageID); // Renvoie un message d'erreur √† l'utilisateur
  api.setMessageReaction("‚ùå", event.messageID, () => {}, true); // Ajoute une r√©action "‚ùå" (√©chec) au message de l'utilisateur
  }
 }
};

async function getStreamFromURL(url) { // Fonction pour r√©cup√©rer un flux de donn√©es √† partir d'une URL
  const res = await axios({ url, responseType: "stream" }); // Effectue une requ√™te GET pour r√©cup√©rer un flux de donn√©es
  return res.data; // Renvoie le flux de donn√©es
}