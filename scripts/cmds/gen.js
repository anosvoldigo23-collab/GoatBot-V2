const axios = require("axios"); // Importe la biblioth√®que axios pour effectuer des requ√™tes HTTP.
const fs = require("fs"); // Importe la biblioth√®que fs pour interagir avec le syst√®me de fichiers.
const path = require("path"); // Importe la biblioth√®que path pour g√©rer les chemins de fichiers.

const CACHE_DIR = path.join(__dirname, "cache"); // D√©finit le dossier de cache o√π les images g√©n√©r√©es seront stock√©es.

module.exports = {
 config: {
  name: "gen", // Nom de la commande.
  aliases: ["ai4image"], // Alias pour la commande (autres noms qui peuvent √™tre utilis√©s pour appeler la commande).
  version: "1.1", // Version de la commande.
  author: "Christus x Aesther", // Auteur de la commande.
  countDown: 5, // D√©lai d'attente avant de pouvoir r√©utiliser la commande (en secondes).
  role: 0, // Niveau de r√¥le requis pour utiliser la commande (0 g√©n√©ralement pour tout le monde).
  shortDescription: { en: "G√©n√©rer des images IA en utilisant Gen AI" }, // Description courte de la commande (en anglais).
  longDescription: { en: "Envoyez une invite textuelle et √©ventuellement un ratio d'aspect pour g√©n√©rer une image IA en utilisant l'API Christus AI4Image." }, // Description longue de la commande (en anglais).
  category: "ai", // Cat√©gorie de la commande (ici, IA).
  guide: { en: "{pn} <prompt> [--ar=1:1]\n\nExample:\n{pn} cute cat in a garden --ar=16:9" } // Guide d'utilisation de la commande (en anglais).
 },

 onStart: async function ({ api, args, event }) {
  // Fonction qui s'ex√©cute lorsque la commande est appel√©e.
  if (!args[0]) return api.sendMessage("‚ùå Veuillez fournir une invite pour Gen AI.", event.threadID, event.messageID);
  // V√©rifie si une invite (texte descriptif de l'image) a √©t√© fournie. Sinon, renvoie un message d'erreur.

  if (!fs.existsSync(CACHE_DIR)) fs.mkdirSync(CACHE_DIR, { recursive: true });
  // Cr√©e le dossier de cache s'il n'existe pas. L'option "recursive: true" permet de cr√©er les dossiers parents si n√©cessaire.

  let ratio = "1:1";
  // D√©finit le ratio d'aspect par d√©faut √† 1:1 (carr√©).
  const argStr = args.join(" ");
  // Regroupe les arguments de la commande en une seule cha√Æne de caract√®res.

  const arMatch = argStr.match(/--?ar[=\s]+([0-9]+:[0-9]+)/i);
  // Recherche dans les arguments un ratio d'aspect sp√©cifi√© avec --ar= ou -ar= ou --ar ou -ar.
  if (arMatch) ratio = arMatch[1];
  // Si un ratio d'aspect est trouv√©, met √† jour la variable `ratio`.

  const prompt = argStr.replace(/--?ar[=\s]+([0-9]+:[0-9]+)/i, "").trim();
  // Extrait l'invite de texte en supprimant le ratio d'aspect et en enlevant les espaces en trop.

  if (!prompt) return api.sendMessage("‚ùå Veuillez fournir une invite valide.", event.threadID, event.messageID);
  // V√©rifie si l'invite est valide apr√®s le nettoyage. Si ce n'est pas le cas, renvoie un message d'erreur.

  api.setMessageReaction("‚è≥", event.messageID, () => {}, true);
  // Ajoute une r√©action "‚è≥" (en attente) au message de l'utilisateur.

  try {
   const apiUrl = `https://aryanapi.up.railway.app/api/ai4image?prompt=${encodeURIComponent(prompt)}&ratio=${encodeURIComponent(ratio)}`;
   // Construit l'URL de l'API avec l'invite et le ratio d'aspect. Les valeurs sont encod√©es pour une utilisation s√ªre dans l'URL.
   const res = await axios.get(apiUrl, { timeout: 30000 });
   // Effectue une requ√™te GET √† l'API pour g√©n√©rer l'image.  Timeout de 30 secondes.
   const imageUrl = res.data?.result?.image_link;
   // R√©cup√®re l'URL de l'image g√©n√©r√©e √† partir de la r√©ponse de l'API.

   if (!imageUrl) {
    return api.sendMessage("‚ùå √âchec de la g√©n√©ration de l'image Gen AI.", event.threadID, event.messageID);
    // Si l'URL de l'image n'est pas trouv√©e, renvoie un message d'erreur.
   }

   const fileRes = await axios.get(imageUrl, { responseType: "stream" });
   // T√©l√©charge l'image depuis l'URL de l'image.  `responseType: "stream"` permet de traiter la r√©ponse en streaming.
   const filename = `genai_${Date.now()}.jpeg`;
   // Cr√©e un nom de fichier unique pour l'image.
   const filepath = path.join(CACHE_DIR, filename);
   // Cr√©e le chemin complet du fichier o√π l'image sera enregistr√©e.
   const writer = fs.createWriteStream(filepath);
   // Cr√©e un flux d'√©criture pour enregistrer l'image dans le fichier.

   fileRes.data.pipe(writer);
   // Copie les donn√©es de l'image t√©l√©charg√©e dans le flux d'√©criture.

   writer.on("finish", () => {
    // Quand l'√©criture est termin√©e :
    api.sendMessage({
     body: `‚ú® Image Gen AI g√©n√©r√©e pour l'invite: "${prompt}"\nüìê Ratio: ${ratio}`,
     attachment: fs.createReadStream(filepath)
    }, event.threadID, () => {
     // Envoie l'image g√©n√©r√©e √† l'utilisateur.
     try { fs.unlinkSync(filepath); } catch {}
     // Supprime le fichier image du cache apr√®s l'envoi.  Un bloc `try...catch` g√®re les erreurs potentielles.
    }, event.messageID);

    api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);
    // Ajoute une r√©action "‚úÖ" (succ√®s) au message de l'utilisateur.
   });

   writer.on("error", (err) => {
    // Si une erreur se produit pendant l'√©criture du fichier :
    console.error("‚ùå Erreur d'√©criture du fichier:", err.message);
    // Affiche l'erreur dans la console.
    api.sendMessage("‚ùå Erreur lors de l'enregistrement de l'image Gen AI.", event.threadID, event.messageID);
    // Envoie un message d'erreur √† l'utilisateur.
    api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
    // Ajoute une r√©action "‚ùå" (erreur) au message de l'utilisateur.
   });

  } catch (err) {
   // Si une erreur se produit lors de la g√©n√©ration de l'image (requ√™te API, etc.) :
   console.error("‚ùå Erreur lors de la g√©n√©ration de l'image Gen AI:", err.message);
   // Affiche l'erreur dans la console.
   api.sendMessage("‚ùå √âchec de la g√©n√©ration de l'image Gen AI.", event.threadID, event.messageID);
   // Envoie un message d'erreur √† l'utilisateur.
   api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
   // Ajoute une r√©action "‚ùå" (erreur) au message de l'utilisateur.
  }
 }
};