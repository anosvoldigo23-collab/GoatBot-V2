const axios = require("axios"); // Importe la biblioth√®que axios pour les requ√™tes HTTP
const fs = require("fs-extra"); // Importe la biblioth√®que fs-extra pour les op√©rations de fichiers (plus compl√®te que fs de base)

module.exports = {
  config: {
    name: "pair", // Nom de la commande (pour l'appeler)
    aliases: [], // Alias de la commande (noms alternatifs)
    version: "1.0", // Version de la commande
    author: "Christus x Aesther", // Auteur de la commande
    countDown: 5, // D√©lai d'attente en secondes avant que la commande puisse √™tre r√©utilis√©e
    role: 0, // R√¥le requis pour utiliser la commande (0 = tous les utilisateurs)
    shortDescription: "", // Courte description de la commande
    longDescription: "", // Description d√©taill√©e de la commande
    category: "love", // Cat√©gorie de la commande (ex: amour, utilitaire, etc.)
    guide: "{pn}" // Instructions d'utilisation de la commande (remplac√© par le pr√©fixe du bot)
  },

  onStart: async function({ api, event, threadsData, usersData }) {
    // Fonction ex√©cut√©e lorsque la commande est appel√©e

    const { threadID, messageID, senderID } = event; // Extrait les informations de l'√©v√©nement (ID du fil de discussion, ID du message, ID de l'exp√©diteur)
    const { participantIDs } = await api.getThreadInfo(threadID); // R√©cup√®re les ID des participants du fil de discussion
    var tle = Math.floor(Math.random() * 101); // G√©n√®re un nombre al√©atoire entre 0 et 100 (pour le pourcentage de compatibilit√©)
    var namee = (await usersData.get(senderID)).name // R√©cup√®re le nom de l'exp√©diteur
    const botID = api.getCurrentUserID(); // R√©cup√®re l'ID du bot
    const listUserID = participantIDs.filter(ID => ID != botID && ID != senderID); // Filtre la liste des ID des participants pour ne garder que les autres utilisateurs (pas le bot ni l'exp√©diteur)
    var id = listUserID[Math.floor(Math.random() * listUserID.length)]; // Choisit al√©atoirement un ID d'un autre utilisateur
    var name = (await usersData.get(id)).name // R√©cup√®re le nom de l'utilisateur s√©lectionn√©

    var arraytag = []; // Cr√©e un tableau pour les mentions (pour taguer les utilisateurs dans le message)
    arraytag.push({ id: senderID, tag: namee }); // Ajoute l'exp√©diteur au tableau des mentions
    arraytag.push({ id: id, tag: name }); // Ajoute l'utilisateur s√©lectionn√© au tableau des mentions

    // R√©cup√®re l'avatar de l'exp√©diteur depuis Facebook
    let Avatar = (await axios.get(`https://graph.facebook.com/${senderID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: "arraybuffer" })).data;
    fs.writeFileSync(__dirname + "/cache/avt.png", Buffer.from(Avatar, "utf-8")); // Enregistre l'avatar dans un fichier temporaire

    // R√©cup√®re une image GIF depuis une URL
    let gifLove = (await axios.get(`https://i.ibb.co/y4dWfQq/image.gif`, { responseType: "arraybuffer" })).data;
    fs.writeFileSync(__dirname + "/cache/giflove.png", Buffer.from(gifLove, "utf-8")); // Enregistre le GIF dans un fichier temporaire

    // R√©cup√®re l'avatar de l'utilisateur s√©lectionn√© depuis Facebook
    let Avatar2 = (await axios.get(`https://graph.facebook.com/${id}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: "arraybuffer" })).data;
    fs.writeFileSync(__dirname + "/cache/avt2.png", Buffer.from(Avatar2, "utf-8")); // Enregistre l'avatar dans un fichier temporaire

    var imglove = []; // Cr√©e un tableau pour les pi√®ces jointes (images)

    imglove.push(fs.createReadStream(__dirname + "/cache/avt.png")); // Ajoute l'avatar de l'exp√©diteur en pi√®ce jointe
    imglove.push(fs.createReadStream(__dirname + "/cache/giflove.png")); // Ajoute le GIF en pi√®ce jointe
    imglove.push(fs.createReadStream(__dirname + "/cache/avt2.png")); // Ajoute l'avatar de l'utilisateur s√©lectionn√© en pi√®ce jointe

    // Cr√©e le message √† envoyer
    var msg = {
      body: `ü•∞ Appariement r√©ussi !\nüíå Je vous souhaite √† tous les deux cent ans de bonheur\nüíï Taux de compatibilit√©: ${tle}%\n${namee} üíì ${name}`, // Corps du message
      mentions: arraytag, // Mentions des utilisateurs
      attachment: imglove // Pi√®ces jointes (images)
    };

    return api.sendMessage(msg, event.threadID, event.messageID); // Envoie le message dans le fil de discussion
  }
};